{"version":3,"sources":["useApplePay.tsx"],"names":["eventEmitter","NativeEventEmitter","NativeModules","StripeSdk","SET_SHIPPING_METHOD_CALLBACK_NAME","SET_SHIPPING_CONTACT_CALLBACK_NAME","useApplePay","onShippingMethodSelected","onShippingContactSelected","isApplePaySupported","presentApplePayNative","presentApplePay","confirmApplePayPaymentNative","confirmApplePayPayment","updateApplePaySummaryItems","items","setItems","loading","setLoading","onDidSetShippingMethod","result","shippingMethod","onDidSetShippingContact","shippingContact","addListener","removeListener","params","cartItems","error","clientSecret"],"mappings":"uVACA,4BACA,uCACA,yCAEA,GAAMA,CAAAA,YAAY,CAAG,GAAIC,gCAAJ,CAAuBC,2BAAcC,SAArC,CAArB,CAuDA,GAAMC,CAAAA,iCAAiC,CAAG,wBAA1C,CACA,GAAMC,CAAAA,kCAAkC,CAAG,yBAA3C,CAKO,QAASC,CAAAA,WAAT,EAGQ,oEAAJ,EAAI,CAFbC,wBAEa,MAFbA,wBAEa,CADbC,yBACa,MADbA,yBACa,CACb,eAKI,2BALJ,CACEC,mBADF,YACEA,mBADF,CAEmBC,qBAFnB,YAEEC,eAFF,CAG0BC,4BAH1B,YAGEC,sBAHF,CAIEC,0BAJF,YAIEA,0BAJF,CAMA,cAA0B,oBAA4C,IAA5C,CAA1B,qDAAOC,KAAP,eAAcC,QAAd,eACA,eAA8B,oBAAS,KAAT,CAA9B,sDAAOC,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,sBAAsB,CAAG,uBAC7B,SAACC,MAAD,CAAyD,CACvD,GAAIb,wBAAJ,CAA8B,CAC5BA,wBAAwB,CACtBa,MAAM,CAACC,cADe,CAEtBP,0BAFsB,CAAxB,CAID,CALD,IAKO,CACLA,0BAA0B,CAACC,KAAD,CAA1B,CACD,CACF,CAV4B,CAW7B,CAACA,KAAD,CAAQR,wBAAR,CAAkCO,0BAAlC,CAX6B,CAA/B,CAcA,GAAMQ,CAAAA,uBAAuB,CAAG,uBAC9B,SAACF,MAAD,CAA2D,CACzD,GAAIZ,yBAAJ,CAA+B,CAC7BA,yBAAyB,CACvBY,MAAM,CAACG,eADgB,CAEvBT,0BAFuB,CAAzB,CAID,CALD,IAKO,CACLA,0BAA0B,CAACC,KAAD,CAA1B,CACD,CACF,CAV6B,CAW9B,CAACA,KAAD,CAAQP,yBAAR,CAAmCM,0BAAnC,CAX8B,CAAhC,CAcA,qBAAU,UAAM,CACdd,YAAY,CAACwB,WAAb,CACEpB,iCADF,CAEEe,sBAFF,EAIAnB,YAAY,CAACwB,WAAb,CACEnB,kCADF,CAEEiB,uBAFF,EAKA,MAAO,WAAM,CACXtB,YAAY,CAACyB,cAAb,CACErB,iCADF,CAEEe,sBAFF,EAIAnB,YAAY,CAACyB,cAAb,CACEpB,kCADF,CAEEiB,uBAFF,EAID,CATD,CAUD,CApBD,CAoBG,CAACA,uBAAD,CAA0BH,sBAA1B,CApBH,EAsBA,GAAMR,CAAAA,eAAe,CAAG,uBACtB,iBAAOe,MAAP,+HACER,UAAU,CAAC,IAAD,CAAV,CACAF,QAAQ,CAACU,MAAM,CAACC,SAAR,CAAR,CAFF,kDAGuBjB,qBAAqB,CAACgB,MAAD,CAH5C,SAGQN,MAHR,eAIE,GAAIA,MAAM,CAACQ,KAAX,CAAkB,CAChBZ,QAAQ,CAAC,IAAD,CAAR,CACD,CACDE,UAAU,CAAC,KAAD,CAAV,CAPF,gCAQSE,MART,uEADsB,CAWtB,CAACV,qBAAD,CAXsB,CAAxB,CAcA,GAAMG,CAAAA,sBAAsB,CAAG,uBAC7B,kBAAOgB,YAAP,mIACEX,UAAU,CAAC,IAAD,CAAV,CADF,mDAEuBN,4BAA4B,CAACiB,YAAD,CAFnD,SAEQT,MAFR,gBAGEJ,QAAQ,CAAC,IAAD,CAAR,CACAE,UAAU,CAAC,KAAD,CAAV,CAJF,iCAKSE,MALT,wEAD6B,CAQ7B,CAACR,4BAAD,CAR6B,CAA/B,CAWA,MAAO,CACLK,OAAO,CAAPA,OADK,CAELN,eAAe,CAAfA,eAFK,CAGLE,sBAAsB,CAAtBA,sBAHK,CAILJ,mBAAmB,CAAnBA,mBAJK,CAAP,CAMD","sourcesContent":["import type { ApplePay, ApplePayError, StripeError } from '../types';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useStripe } from './useStripe';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst eventEmitter = new NativeEventEmitter(NativeModules.StripeSdk);\n\nexport interface Props {\n  /**\n   *\n   * @example\n   * ```ts\n   * const { presentApplePay } = useApplePay({\n   *  onShippingMethodSelected: (shippingMethod, handler) => {\n   *    handler([\n   *      { label: 'Example item name 1', amount: '11.00' },\n   *      { label: 'Example item name 2', amount: '25.00' },\n   *   ]);\n   *  }\n   * })\n   * ```\n   */\n  onShippingMethodSelected?: (\n    shippingMethod: ApplePay.ShippingMethod,\n    handler: (\n      summaryItems: ApplePay.CartSummaryItem[]\n    ) => Promise<{\n      error?: StripeError<ApplePayError>;\n    }>\n  ) => void;\n  /**\n   *\n   * @example\n   * ```ts\n   * const { presentApplePay } = useApplePay({\n   *  onShippingContactSelected: (shippingContact, handler) => {\n   *    handler([\n   *      { label: 'Example item name 1', amount: '11.00' },\n   *      { label: 'Example item name 2', amount: '25.00' },\n   *    ], [\n   *      { field: 'city', message: 'city error' },\n   *    ]);\n   *  }\n   * })\n   * ```\n   */\n  onShippingContactSelected?: (\n    shippingContact: ApplePay.ShippingContact,\n    handler: (\n      summaryItems: ApplePay.CartSummaryItem[],\n      errorAddressFields?: Array<{\n        field: ApplePay.AddressFields;\n        message?: string;\n      }>\n    ) => Promise<{\n      error?: StripeError<ApplePayError>;\n    }>\n  ) => void;\n}\n\nconst SET_SHIPPING_METHOD_CALLBACK_NAME = 'onDidSetShippingMethod';\nconst SET_SHIPPING_CONTACT_CALLBACK_NAME = 'onDidSetShippingContact';\n\n/**\n * useApplePay hook\n */\nexport function useApplePay({\n  onShippingMethodSelected,\n  onShippingContactSelected,\n}: Props = {}) {\n  const {\n    isApplePaySupported,\n    presentApplePay: presentApplePayNative,\n    confirmApplePayPayment: confirmApplePayPaymentNative,\n    updateApplePaySummaryItems,\n  } = useStripe();\n  const [items, setItems] = useState<ApplePay.CartSummaryItem[] | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const onDidSetShippingMethod = useCallback(\n    (result: { shippingMethod: ApplePay.ShippingMethod }) => {\n      if (onShippingMethodSelected) {\n        onShippingMethodSelected(\n          result.shippingMethod,\n          updateApplePaySummaryItems\n        );\n      } else {\n        updateApplePaySummaryItems(items as ApplePay.CartSummaryItem[]);\n      }\n    },\n    [items, onShippingMethodSelected, updateApplePaySummaryItems]\n  );\n\n  const onDidSetShippingContact = useCallback(\n    (result: { shippingContact: ApplePay.ShippingContact }) => {\n      if (onShippingContactSelected) {\n        onShippingContactSelected(\n          result.shippingContact,\n          updateApplePaySummaryItems\n        );\n      } else {\n        updateApplePaySummaryItems(items as ApplePay.CartSummaryItem[]);\n      }\n    },\n    [items, onShippingContactSelected, updateApplePaySummaryItems]\n  );\n\n  useEffect(() => {\n    eventEmitter.addListener(\n      SET_SHIPPING_METHOD_CALLBACK_NAME,\n      onDidSetShippingMethod\n    );\n    eventEmitter.addListener(\n      SET_SHIPPING_CONTACT_CALLBACK_NAME,\n      onDidSetShippingContact\n    );\n\n    return () => {\n      eventEmitter.removeListener(\n        SET_SHIPPING_METHOD_CALLBACK_NAME,\n        onDidSetShippingMethod\n      );\n      eventEmitter.removeListener(\n        SET_SHIPPING_CONTACT_CALLBACK_NAME,\n        onDidSetShippingContact\n      );\n    };\n  }, [onDidSetShippingContact, onDidSetShippingMethod]);\n\n  const presentApplePay = useCallback(\n    async (params: ApplePay.PresentParams) => {\n      setLoading(true);\n      setItems(params.cartItems);\n      const result = await presentApplePayNative(params);\n      if (result.error) {\n        setItems(null);\n      }\n      setLoading(false);\n      return result;\n    },\n    [presentApplePayNative]\n  );\n\n  const confirmApplePayPayment = useCallback(\n    async (clientSecret: string) => {\n      setLoading(true);\n      const result = await confirmApplePayPaymentNative(clientSecret);\n      setItems(null);\n      setLoading(false);\n      return result;\n    },\n    [confirmApplePayPaymentNative]\n  );\n\n  return {\n    loading,\n    presentApplePay,\n    confirmApplePayPayment,\n    isApplePaySupported,\n  };\n}\n"]}